package poly.car0;

public class K3Car {
    // 좋은 객체 지향 프로그래밍

    // 객체 지향 프로그래밍의 특징
    // 추상화, 캡슐화, 상속, 다형성(제일 중요)

    // 객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 객체들의 모임으로 파악하고자 하는 것
    //  - 컴퓨터 프로그래밍 = 객체들의 모임, 이 때 각 객체들은 협력하여 메세지를 주고 받고 데이터를 처리할 수 있다.
    // 각각의 객체는 메시지를 주고 받고, 데이터를 처리할 수 있다(협력).

    // 객체 지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다.
    //  - 레고 블럭 조립하듯이, 키보드나 마우스를 갈아 끼우듯이, 컴퓨터 부품 갈아 끼우듯이 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법
    //   * 컴포넌트 : 재사용 가능한 독립된 조각

    // 다형성의 실세계 비유
    //  - 세상을 역할과 구현으로 구분
    //  - 자동차 역할, 운전자 역할(클라이언트)
    //  - 자동차 역할이라는 인터페이스를 통해 K3(구현체), 아반떼(구현체), 테슬라 모델3(구현체) 등 여러 자동차를 만들어낸다.
    //  - 따라서 자동차가 바뀌더라도 면허증을 계속 새로 딸 필요가 없고, 바로 운전할 수 있다.
    //  - 운전자는 자동차 역할만 알고 있으면 그걸 통해 만들어진 구현체들은 다 운용할 수 있는 것이다.

    // 공연 무대(로미오와 줄리엣 공연)
    //  - 로미오 역할, 줄리엣 역할은 여러 배우들이 차지할 수 있다.
    //  - 대본에만 맞춰서 연기하기 때문에, 변경이 클라이언트(배우들)에게 변화를 주지 않는다.
    //  - 따라서 다른 대상으로의 변환이 용이(공연 대본만 알고 있으면 되기 때문)하다.

    // 역할과 구현을 분리
    // 역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다.
    // 장점
    //  - 클라이언트는 대상의 역할(인터페이스)만 알면 된다.
    //  - 클라이언트틑 구현 대상의 내부 구조를 몰라도 된다.
    //   - k3의 내부 구조를 몰라도 운전하는데 이상 없음

    //  - 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
    //   - k3의 부품이 바뀌어도 운전하는데 이상 없음

    //  - 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.
    //   - k3의 테슬라 모델3로 바꾸어도 운전하는데 이상 없음

    // 자바 언어의 다형성을 활용해 역할을 인터페이스, 구현을 인터페이스를 구현한 클래스 혹은 구현 객체로 정의
    // 객체를 설계할 때 역할과 구현을 명확히 분리
    // 객체 설계 시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기

    // 객체의 협력이라는 관계부터 생각(다형성의 본질을 이해하기 위해)해야 한다.
    // 혼자 있는 객체는 없다.
    // 클라이언트 : 요청(요청하는 모든 것), 서버 : 응답(응답하는 모든 것)
    // 수 많은 객체 클라이언트와 객체 서버는 서로 협력 관계를 가진다.
    // 클라이언트가 동시에 서버, 서버가 동시에 클라이언트가 될 수 있다.

    // 다형성의 본질
    // 다형성의 본질을 이해하려면 협력이라는 객체 사이의 관계에서 시작해야 한다.
    // 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있는 것
    // 즉, 클라이언트를 변경하지 않고, 서버의 구현기능을 유연하게 변경할 수 있는 것이다.

    // 역할과 구현을 분리할 때의 한계점
    // 역할(인터페이스) 자체가 변하면, 클라이언트와 서버 모두에 큰 변경이 발생한다.
    //  - 자동차를 비행기로 변경해야 한다면?
    //  - 대본 자체가 변경된다면?
    // 따라서 인터페이스를 안정적으로 잘 설계하는 것이 중요하다.

    // 정리
    // 다형성이 가장 중요
    // 디자인 패턴 대부분은 다형성을 활용하는 것이다.
    // 스프링의 핵심인 제어의 역전(IoC), 의존관계 주입(DI)도 결국 다형성을 활용하는 것이다.
    // 다형성을 잘 활용하면 마치 레고 블럭 조립하듯이, 공연 무대의 배우를 선택하듯이 구현을 편리하게 변경할 수 있다.

    // 다형성, 역할과 구현 예제 1
    public void startEngine() {
        System.out.println("K3Car.startEngine");
    }

    public void offEngine() {
        System.out.println("K3Car.offEngine");
    }

    public void pressAccelerator() {
        System.out.println("K3Car.pressAccelerator");
    }
}
