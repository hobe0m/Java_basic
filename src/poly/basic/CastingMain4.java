package poly.basic;

public class CastingMain4 {
    public static void main(String[] args) {
        // 다운캐스팅을 자동으로 하지 않는 이유
        // 다운캐스팅은 잘못하면 심각한 런타임 오류가 발생할 수 있기 때문이다.
        Parent parent1 = new Child(); // 자식을 부모에게 넣는 것은 가능
        Child child1 = (Child) parent1; // 부모를 자식에게 넣는 것은 불가, 명시적으로 다운캐스팅을 해주면 가능
        child1.childMethod(); // 문제 없음, Child 객체에 부모와 자식이 다 있기 때문이다.

        Parent parent2 = new Parent(); // 부모 객체 생성
        Child child2 = (Child) parent2; // 부모 객체의 참조값(자식 타입이 존재하지 않기 때문에)을 자식 객체에 대입 시, 런타임 오류 발생(ClassCastException)
                                        //  - 자바에서는 이렇게 사용할 수 없는 타입(메모리상에 Child가 없기 때문)으로 다운 캐스팅하는 경우에 예외 발생
        child2.childMethod(); // 따라서 실행 불가

        // 업캐스팅이 안전하고 다운캐스팅이 위험한 이유
        // 업캐스팅의 경우 인스턴스 생성 시 부모의 인스턴스도 모두 생성하기 때문에 위와 같은 일이 절대 일어나지 않는다.
        // 따라서 업캐스팅은 생략이 가능하다.
        // 반면에 다운캐스으의 경우 인스턴스에 존재하지 않는 하위 타입으로 캐스팅하는 문제가 발생할 수 있다.
        // 왜냐하면 객체를 생성하면 부모 타입은 모두 함께 생성되지만 자식 타입은 생성되지 않기 때문이다.
        // 따라서 개발자가 이런 문제를 인지하고 사용해야 한다는 의미로 명시적 캐스팅을 하는 것이다.
        // 하위 타입으로 캐스팅하는 경우 타입에 맞는 것들이 모두 있어야 하지만, 객체를 생성할 때 하위의 자식은 생성되지 않기 때문에 인스턴스 내부에 없는 부분을 선택하는 문제가 발생할 수 있다.

        // 컴파일 오류 vs 런타임 오류
        // 컴파일 오류는 변수명 오타, 잘못된 클래스 이름 등 프로그램을 실행하기 전에 오류가 발생하는 것
        // 런타임 오류는 프로그램이 실행되고 있는 시점(고객이 사용하는 시점)에 발생하는 오류이다.
        // 따라서 컴파일 오류는 좋은 오류, 런타임 오류는 안좋은 오류이다.
    }
}
