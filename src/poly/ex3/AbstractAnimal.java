package poly.ex3;

public abstract class AbstractAnimal {
    // 추상 클래스 1
    // 동물(Animal)과 같이 부모 클래스는 제공하지만, 실제 생성되면 안되는 클래스를 추상 클래스라 한다.
    // 이름 그대로 추상적인 개념을 제공하는 클래스이며 실체인 인스턴스가 존재하지 않고 상속을 목적으로 한다.
    // 부모 클래스의 역할을 담당한다.

    // 추상 클래스를 만들 때는 클래스 선언 시 class 앞에 abstract(추상적)를 붙여주면 된다.
    // 추상 클래스는 기존 클래스와 완전히 같지만, new를 통해 직접 인스턴스를 생성하지 못한다는 제약이 추가된다.

    // 추상 메서드
    // 부모 클래스를 상속 받는 자식 클래스가 반드시 오버라이딩 해야하는 메서드
    // 추상 메서드는 이름 그대로 추상적인 개념을 제공하는 메서드이므로 실체가 존재하지 않아 메서드 바디(코드 블럭)가 없다(만들면 안된다.).
    // 추상 메서드 또한 메서드(void 앞) 앞에 추상이라는 의미의 abstract를 붙여주면 된다.

    // 클래스 안에 추상 메서드가 하나라도 있으면 추상 클래스로 선언해야 한다.
    //  - 그렇지 않으면 컴파일 오류가 발생한다.
    //  - 객체가 생성되어도 추상 클래스는 호출될 수 없기 때문에 그걸 막기 위함이다(불완전한 메서드를 가지기 때문).

    // 추상 메서드는 반드시 상속 받는 자식 클래스가 오버라이딩해서 사용해야 한다.
    //  - 그렇지 않으면 컴파일 오류가 발생한다.
    //  - 추상 메서드는 자식 클래스의 오버라이딩이 필수이므로 바디 부분이 없다.
    //   - 이 때 바디 부분을 만들면 컴파일 오류가 발생한다.
    //   - 오버라이딩 하지 않으면 자식도 추상 클래스가 되어야 한다(추상 메서드를 상속 받았는데, 그 기능을 오버라이딩 못해서 불완전한 메서드를 가지기 때문).

    // 추상 메서드는 기존 메서드와 완전히 같지만 메서드 바디가 없고 자식 클래스가 해당 메서드를 반드시 오버라이딩 해야한다는 제약이 추가된 것이다.

    // 추상 메서드
    // 추상 메서드가 하나라도 있으면 추상 클래스가 되어야 한다.
    public abstract void sound();
    
    // 일반 메서드
    public void move() {
        System.out.println("동물이 움직입니다.");
    }
}
