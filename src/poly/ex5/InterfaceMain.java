package poly.ex5;

public class InterfaceMain {
    public static void main(String[] args) {
        // InterfaceAnimal interfaceAnimal = new InterfaceAnimal(); 완전 추상이므로 생성 불가

        Dog dog = new Dog();
        Cat cat = new Cat();
        Cow cow = new Cow();

        soundAnimal(dog);
        soundAnimal(cat);
        soundAnimal(cow);
    }
    public static void soundAnimal(InterfaceAnimal animal) {
        System.out.println("동물 소리 테스트 시작");
        animal.sound();
        System.out.println("동물 소리 테스트 종료");
    }

    // 클래스, 추상 클래스, 인터페이스는 프로그램 코드나 메모리 구조 상 모두 똑같고 모두 자바에서는 .class로 다루어진다.
    // 인터페이스를 작성할 때도 .java에 인터페이스를 정의한다.
    // 따라서 인터페이스를 순수 추상 클래스와 비슷하다고 생각하면 된다.
    //  - 사실 자바에는 순수 추상 클래스가 없고 인터페이스가 그 자리를 대신한다.

    // 상속 vs 구현
    // 부모 클래스의 기능을 자식 클래스가 상속 받을 때, 클래스는 상속 받는다고 표현
    //  - 부모의 기능이 있고 그것을 물려 받는 것이 목적

    // 부모 인터페이스의 기능을 자식이 상속 받을 때는 인터페이스를 구현한다고 표현
    //  - 물려 받을 부모의 기능이 없고, 오히려 인터페이스에 정의된 모든 메서드를 자식이 오버라이딩 해서 기능을 구현해야 하므로 구현한다라고 표현
    //  - 따라서 메서드 이름만 있는 설계도이고, 이 설계도가 실제로 어떻게 작동하는지는 하위 클래스에서 전부 구현해야 하기 때문에 구현이라고 표현

    // 상속과 구현은 사람이 표현하는 언어만 다를 뿐이지 자바 입장에서는 똑같기 때문에 일반 상속 구조와 동일하게 작동한다.

    // 인터페이스를 사용해야 하는 이유
    // 제약
    //  - 인터페이스의 메서드를 반드시 구현하라는 제약(규약)을 주는 것이다.
    //  - 순수 추상 클래스는 미래에 실행 가능한 일반 메서드가 추가될 수 있고, 그 추가된 기능을 인터페이스에서 자식 클래스에서 구현하지 않을 수 있고 그로 인해 더는 순수 추상 클래스가 아니게 된다.
    //  - 인터페이스는 모든 메서드가 추상 메서드이므로, 이런 문제를 원천 차단할 수 있다.

    // 다중 구현
    //  - 자바에서 클래스 상속은 부모를 하나만 지정할 수 있지만 인터페이스는 부모를 여러 명 두는 다중 구현(다중 상속)이 가능하다.

    // 참고
    // 자바8에 등장한 default 메서드를 사용하면 인터페이스도 메서드를 구현할 수 있다.
    //  - 하지만 이것은 예외적으로 아주 특별한 경우에만 사용해야 한다.
    // 자바9에 등장한 인터페이스의 private 메서드도 마찬가지이다.
    // 그러나 이런 예외들은 현재 학습 단계에서는 고려하지 않는 것이 좋고 뒤에서 따로 다룬다.

    // 좋은 프로그램은 제약이 있는 프로그램이다.
}
