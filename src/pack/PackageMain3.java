package pack;

import pack.a.User;
public class PackageMain3 {
    public static void main(String[] args) {
        User userA = new User();
        pack.b.User userB = new pack.b.User();
        // 만약 클래스의 이름이 같고 패키지 경로만 다르다면, 둘 중 하나는 패키지의 전체 명칭을 써줘야 한다.
        // 보통 이런 경우에는 자주 사용하는 클래스를 import하고 사용 빈도가 적은 클래스를 풀네임을 써준다.
        // 둘 다 전체 경로를 적는다면 import를 사용하지 않아도 된다.

        // 패키지의 규칙

        // 패키지의 이름과 위치는 폴더(디렉토리)의 위치와 같아야 한다(필수).
        //  - 인텔리제이에서 Copy Path/Reference를 통해 확인 할 수 있다.

        // 패키지 이름은 모두 소문자를 사용한다(관례).

        // 패키지 이름의 앞 부분에는 일반적으로 회사의 도메인 이름을 거꾸로 사용한다(원래는 com이 제일 마지막).
        // 예를 들어 com.company.myapp과 같이 사용한다(관례).
        //  - 필수는 아니지만 수많은 외부 라이브러리가 함께 사용되면 같은 패키지에 같은 클래스 이름이 존재할 수 있다.
        //   - 이런 경우 도메인 이름을 거꾸로 사용하면 문제를 방지할 수 있다.
        //  - 내가 오픈 소스나 라이브러리를 만들어서 외부에 제공하면 꼭 지키는 것이 좋다.
        //  - 내가 만든 애플리케이션을 다른 곳에 공유하지 않고, 직접 배포한다면 보통 문제가 되지 않는다.

        // 패키지가 계층 구조를 이루더라도 모든 패키지는 다른 패키지이다.
        // a 패키지 내부에 b와 c의 패키지가 있으면 a와 a.b 그리고 a.c는 모두 다른 패키지이다.
    }
}
