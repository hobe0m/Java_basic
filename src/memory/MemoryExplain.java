package memory;

public class MemoryExplain {
    // 자바 메모리 구조와 static
    // 크게 메서드 영역, 스택 영역, 힙 영역 3개로 나눌 수 있다.
    // 메서드 영역 : 클래스 정보(예시 : 붕어빵틀)를 보관한다.
    //  - 프로그램을 실행하는 데 필요한 공통 데이터 관리, 메서드 영역은 프로그램의 모든 영역에서 공유
    //  - 클래스 정보 : 클래스의 실행 코드(바이트 코드), 필드, 메서드와 생성자 코드 등 모든 실행 코드가 존재한다.
    //   - 자바 실행 시 클래스 정보를 읽고, 읽은 정보들을 메서드 영역에 올린다.
    //  - static 영역 : static 변수들을 보관
    //  - 런타임 상수 풀(참고) : 프로그램을 실행하는데 필요한 공통 리터럴 상수들을 보관, 예를 들어 프로그램에 "hello"라는 리터럴 문자가 있으면 이런 문자를 공통으로 묶어서 관리, 이 외에도 프로그램을 효율적으로 관리하기 위한 상수들을 관리
    //   - "hello"를 여러 군데에서 사용하면 효율적으로 사용하기 위해 런타임 상수 풀에 모아서 사용

    // 스택 영역 : 실제 프로그램이 실행되는 영역, 메서드를 실행할 때마다 하나씩 쌓인다.
    //  - 자바 실행 시 하나의 실행 스택이 생성, 각 스택 프레임(실행 스텍을 담는 것)은 지역 변수, 중간 연산 결과, 메서드 호출 정보 등을 포함
    //  - 스택 프레임 : 스택 영역에 쌓이는 네모 박스가 하나의 스택 프레임, 메서드를 호출할 때마다 하나의 스텍 프레임이 쌓이고 메서드가 종료되면 해당 스택 프레임이 제거된다.
    //   - main() 실행, main() 스택 프레임 쌓임 - input() 실행, input() 스택 프레임 쌓임 - input() 종료, input() 스택 프레임 제거...

    // 힙 영역 : 객체(인스턴스)가 생성되는 영역, new 명령어를 사용하면 힙 영역을 사용, 붕어빵 틀로부터 생성된 붕어빵이 존재하는 공간이고 배열도 힙 영역에 생성된다.
    //  - 객체(인스턴스)와 배열이 생기는 영역, 가비지 컬렉션이 이루어지는 주요 영역이며 더 이상 참조되지 않는 객체는 GC에 의해 제거된다.

    // 참고 : 스택 영역은 더 정확히는 각 쓰레드별로 하나의 실행 스택이 생성된다.
    //  - 따라서 쓰레드 수만큼 스택 영역이 생성, 지금은 쓰레드를 1개만 사용하므로 스택 영역도 하나이며 쓰레드에 대한 부분은 멀티 쓰레드를 학습해야 이해할 수 있다.
    //  - 쓰레드 : 프로그램의 동작 순서(흐름), 하나의 흐름이 아니라 동시에 여러 개의 흐름(멀티 쓰레드)이 흘러갈 수도 있다.

    // 메서드 코드는 메서드 영역에
    //  - 자바에서 특정 클래스로 100개의 인스턴스를 생성하면 힙 메모리에 100개의 인스턴스가 생긴다.
    //  - 각각의 인스턴스는 내부에 변수와 메서드를 가지고, 같은 클래스로부터 생성된 객체라도 인스턴스 내부의 변수 값을 서로 다를 수 있지만 메서드는 공통된 코드를 공유한다.
    //  - 따라서 객체가 생성될 때 인스턴스 변수에는 메모리가 할당되지만 메서드에 대한 새로운 메모리 할당은 없다.
    //  - 메서드는 메서드 영역에서 공통으로 관리되고 실행된다.
    //  - 정리하면 인스턴스의 메서드를 호출(힙 영역)하면 실제로는 메서드 영역에 있는 코드를 불러서(공유) 수행한다.

    // 스택과 큐 자료 구조
    // 스택(stack) 자료 구조
    //  - 넣는 곳과 빼는 곳이 같음(위에만 뚫린 박스 구조)
    //  - 1(넣기) - 2(넣기) - 3(넣기) - 3(빼기) - 2(빼기) - 1(빼기)
    //  - LIFO(Last In First Out) : 후입 선출(가장 마지막에 넣은 것이 가장 먼저 나오는 구조)

    // 큐(Queue) 자료 구조
    //  - 넣는 곳과 빼는 곳이 다름(위 아래가 모두 뚫린 박스 구조)
    //  - FIFO(First In First Out) : 선입 선출(가장 먼저 넣은 것이 가장 먼저 나오는 것)
    //  - 예를 들어 선착순 이벤트는 큐 구조를 사용해서 만들어야 한다.
}
